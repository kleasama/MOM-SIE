function [ Isn_entry ] = Isnmn(KER, Tf, Ts, mg, ng, mj, nj, wf, ws, Nf, Ns, doextract)
  % Allocate some memory.
  Is_s = zeros(Nf, 3);
  % Proper treatment of the self terms.
  if mg == ng
    Is_s = (0.5 * Tf.getEdgeLength(nj) ./ Tf.getArea ...
         .* Tf.getSingularTermK2(KER.rf, -1, nj) ...
         - 1i * KER.k * Tf.getArea ...
         .* sum(ws .* Ts.getF(KER.rs, nj), 1)) / 4 / pi;
       
    Isn_entry = ProjectionIntegral(wf, ...
                                   Nf, ...
                                   Tf.getArea, ...
                                   Tf.getNxF(KER.rf, mj), ...
                                   Is_s);
  else
    for nf = 1 : Nf
      if (doextract == 1)
        % Source integral with singularity extraction.
        Is_s(nf,:) = SubdomainIntegral(ws, ...
                                       Ns, ...
                                       Ts.getArea, ...
                                       Ts.getF(KER.rs, nj), ...
                                       KER.G(:,:,nf), ...
                                       doextract, ...
                                       KER.Gext(:,:,nf), ...
                                       SingularSumK2(KER, Ts, nj, nf));
      else
        % Source integral without singularity extraction.
        Is_s(nf,:) = SubdomainIntegral(ws, ...
                                       Ns, ...
                                       Ts.getArea, ...
                                       Ts.getF(KER.rs, nj), ...
                                       KER.G(:,:,nf), ...
                                       doextract, ...
                                       0, ...
                                       0);
      end
    end
    % Projection integral used in the testing procedure using the singularity
    % extraction technique.
    Isn_entry = ProjectionIntegral(wf, ...
                                   Nf, ...
                                   Tf.getArea, ...
                                   Tf.getNxF(KER.rf, mj), ...
                                   Is_s);
  end
end
