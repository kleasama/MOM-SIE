function [ Id_entry ] = Idmn(KER, Tf, Ts, mg, ng, mj, nj, wf, ws, Nf, Ns, doextract)
  % Proper treatment of the self terms.
  if mg == ng
    Id_entry = Tf.getDivF(mj) .* Tf.getDivF(nj) ...
             .* (Tf.getSelfTermId - Tf.getArea.^2 * 1i * KER.k) / 4 / pi;
  else
    % Allocate some memory.
    Id_s = zeros(Nf, 1);
    for nf = 1 : Nf
      if (doextract == 1)
        % Source integral with singularity extraction.
        Id_s(nf) = SubdomainIntegral(ws, ...
                                     Ns, ...
                                     Ts.getArea, ...
                                     ones(Ns, 1) .* Ts.getDivF(nj), ...
                                     KER.G(:,:,nf), ...
                                     doextract, ...
                                     KER.Gext(:,:,nf), ...
                                     SingularSumK1(KER, Ts, nj, nf));
      else
        % Source integral without singularity extraction.
        Id_s(nf) = SubdomainIntegral(ws, ...
                                     Ns, ...
                                     Ts.getArea, ...
                                     ones(Ns, 1) .* Ts.getDivF(nj), ...
                                     KER.G(:,:,nf), ...
                                     doextract, ...
                                     0, ...
                                     0);
      end
    end
    % Projection integral used in the testing procedure using the singularity
    % extraction technique.
    Id_entry = ProjectionIntegral(wf, ...
                                  Nf, ...
                                  Tf.getArea, ...
                                  ones(Nf, 1) .* Tf.getDivF(mj), ...
                                  Id_s);
  end
end
